// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  username   String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  quizzes    Quiz[]     
  results    Result[]   
  leaderboard Leaderboard[]
}

enum UserRole {
  CREATOR
  PARTICIPANT
}

model Quiz {
  id          String      @id @default(uuid())
  title       String
  description String?
  creatorId   String
  creator     User        @relation(fields: [creatorId], references: [id])
  questions   Question[]
  settings    Json        // JSON for timer, points, etc.
  status      QuizStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  results     Result[]
  leaderboard Leaderboard[]
}

enum QuizStatus {
  PUBLISHED
  DRAFT
}

model Question {
  id            String   @id @default(uuid())
  quizId        String
  quiz          Quiz     @relation(fields: [quizId], references: [id])
  text          String
  options       Json     // JSON array of answer options
  correctAnswer Json     // JSON array of correct answers
  mediaUrl     String?   // URL for associated images/videos
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Result {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  quizId     String
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  score      Float
  answers    Json     // JSON array of user's answers
  timeTaken  Int      // Time taken in seconds
  createdAt  DateTime @default(now())
}

model Leaderboard {
  id        String   @id @default(uuid())
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  score     Float
  rank      Int
  
  @@unique([quizId, userId])
  @@index([quizId, score])
}